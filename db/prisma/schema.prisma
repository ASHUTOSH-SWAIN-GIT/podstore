generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  sessions      Session[] @relation("HostSessions")
  participations Participation[]
  createdAt     DateTime @default(now())
}


model Session {
  id             String           @id @default(cuid())
  title          String?
  hostId         String
  host           User             @relation("HostSessions", fields: [hostId], references: [id])
  participants   Participation[]
  mediaFiles     MediaFile[]
  startTime      DateTime?
  endTime        DateTime?
  status         SessionStatus    @default(SCHEDULED)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  processingJob  ProcessingJob[]
}

enum SessionStatus {
  SCHEDULED
  LIVE
  ENDED
  PROCESSING
  COMPLETE
}


model Participation {
  id         String   @id @default(cuid())
  userId     String
  sessionId  String
  user       User     @relation(fields: [userId], references: [id])
  session    Session  @relation(fields: [sessionId], references: [id])
  joinedAt   DateTime @default(now())
  leftAt     DateTime?
  role       Role     @default(GUEST)
  mediaFiles MediaFile[]
}

enum Role {
  HOST
  GUEST
}



model MediaFile {
  id             String         @id @default(cuid())
  sessionId      String
  participantId  String?
  type           MediaType      // e.g., AUDIO, VIDEO, SCREEN
  isFinal        Boolean        @default(false)
  status         UploadStatus   @default(PENDING)
  s3Key          String         // e.g., s3://bucket/sessionId/filename.webm
  url            String?        // Presigned or public
  duration       Int?           // In seconds
  uploadedAt     DateTime?
  session        Session        @relation(fields: [sessionId], references: [id])
  participant    Participation? @relation(fields: [participantId], references: [id])
}

enum MediaType {
  AUDIO
  VIDEO
  AUDIO_VIDEO
  SCREEN
}

enum UploadStatus {
  PENDING
  UPLOADING
  COMPLETE
  FAILED
}


model ProcessingJob {
  id          String         @id @default(cuid())
  sessionId   String
  type        JobType
  status      JobStatus      @default(QUEUED)
  startedAt   DateTime?
  completedAt DateTime?
  log         String?
  session     Session        @relation(fields: [sessionId], references: [id])
}

enum JobType {
  MERGE_AUDIO_VIDEO
  TRANSCRIBE
  NORMALIZE_AUDIO

}

enum JobStatus {
  QUEUED
  IN_PROGRESS
  SUCCESS
  FAILED
}





