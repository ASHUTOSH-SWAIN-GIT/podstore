generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- NEW MODEL: For individual recording segments ---
// This table stores metadata for each raw chunk uploaded to temporary storage (e.g., B2).
model RecordingChunk {
  id            String   @id @default(cuid())
  sessionId     String
  participantId String   // Links the chunk to a specific participant in the session
  chunkIndex    Int      // The order of the chunk in the sequence (0, 1, 2, ...)
  storagePath   String   // The path/key of the chunk file in B2 storage
  createdAt     DateTime @default(now())

  // --- Relations ---
  session       Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant   Participation @relation(fields: [participantId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  email          String?         @unique
  createdAt      DateTime        @default(now())
  name           String?
  participations Participation[]
  sessions       Session[]       @relation("HostSessions")
}

model Session {
  id            String          @id @default(cuid())
  title         String?
  hostId        String
  startTime     DateTime?
  endTime       DateTime?
  status        SessionStatus   @default(SCHEDULED)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  joinToken     String?         @unique
  mediaFiles    MediaFile[]
  participants  Participation[]
  processingJob ProcessingJob[]
  host          User            @relation("HostSessions", fields: [hostId], references: [id])

  // --- ADDED RELATION: A session can have many chunks ---
  chunks        RecordingChunk[]
}

model Participation {
  id         String      @id @default(cuid())
  userId     String
  sessionId  String?
  joinedAt   DateTime    @default(now())
  leftAt     DateTime?
  role       Role        @default(GUEST)
  name       String?
  mediaFiles MediaFile[]
  session    Session?    @relation(fields: [sessionId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  // --- ADDED RELATION: A participant can record many chunks ---
  chunks     RecordingChunk[]
}

// This model is for the FINAL, stitched media file
model MediaFile {
  id            String         @id @default(cuid())
  sessionId     String
  participantId String?
  type          MediaType
  isFinal       Boolean        @default(false)
  status        UploadStatus   @default(PENDING)
  s3Key         String
  url           String?
  duration      Int?
  uploadedAt    DateTime?
  
  participant   Participation? @relation(fields: [participantId], references: [id])
  session       Session        @relation(fields: [sessionId], references: [id])
}

model ProcessingJob {
  id          String    @id @default(cuid())
  sessionId   String
  type        JobType
  status      JobStatus @default(QUEUED)
  startedAt   DateTime?
  completedAt DateTime?
  log         String?
  session     Session   @relation(fields: [sessionId], references: [id])
}

enum SessionStatus {
  SCHEDULED
  LIVE
  ENDED
  PROCESSING
  COMPLETE
}

enum Role {
  HOST
  GUEST
}

enum MediaType {
  AUDIO
  VIDEO
  AUDIO_VIDEO
  SCREEN
  // It might be useful to add a type for the final stitched file
  AUDIO_VIDEO_FINAL
}

enum UploadStatus {
  PENDING
  UPLOADING
  COMPLETE
  FAILED
}

enum JobType {
  MERGE_AUDIO_VIDEO
  TRANSCRIBE
  NORMALIZE_AUDIO
  // A new job type for the stitching process
  STITCH_CHUNKS
}

enum JobStatus {
  QUEUED
  IN_PROGRESS
  SUCCESS
  FAILED
}
